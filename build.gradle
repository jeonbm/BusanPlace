plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.7'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.mintcho95'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {

	implementation("org.springframework.boot:spring-boot-starter-security")
	testImplementation("org.springframework.security:spring-security-test")

	// jwt

	implementation("io.jsonwebtoken:jjwt-api:0.11.5")
	runtimeOnly("io.jsonwebtoken:jjwt-impl:0.11.5")
	runtimeOnly("io.jsonwebtoken:jjwt-jackson:0.11.5")



	implementation("org.springframework.boot:spring-boot-starter-validation")

	// 디펜더시도 소스코드처럼 분리해서 여기로 모으는 방법이 있음


	// 학습의 원활한 진행을 위한 임시적으로 구버전으로 학습후 넘어갈 예정

	// 서버 , 클라가 통신을 원활하게 위한 직렬화
	implementation("com.google.code.gson:gson:2.8.6")

	//annotationProcessor를 Lombok 다음에 Mapstruct를 선언해야 @Getter , @Setter 인식을 할수 있다.

	implementation "org.mapstruct:mapstruct:1.3.1.Final"
	implementation "org.projectlombok:lombok:1.18.30"
	implementation 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

	annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"
	annotationProcessor "org.mapstruct:mapstruct-processor:1.3.1.Final"
	annotationProcessor "org.projectlombok:lombok:1.18.30"
	//출처: https://wise-develop.tistory.com/18 [슬기로운개발생활:티스토리]


	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'


}

tasks.named('bootBuildImage') {
	builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
	useJUnitPlatform()
}
